#+title: Mastering Concurrent Processes With ~core.async~

* Getting started with process
See leiningen project.
** Channel
A ~golang~ inspired concurrency model (event-based concurrency):
+ ~chan~ create a channel
Channel communicate through messages, channel have 2 operation:
+ put a message in it (~>!!~)
+ take a message from it (~<!~)
Process ~wait~ for the completion of put and take.
#+begin_src clojure
(def echo-chan (chan))
(go (println (<! echo-chan)))
(>!! echo-chan "ketchup")
#+end_src
** Rule of the processes:
1. when trying to put a message on channel or take from it, wait and do nothing until the put or take succeds.
2. when the put or take succeds, continue executing.
** ~go~ block
Everything in a ~go~ block runs concurrently on different thread.
** Buffering
Give a size to the channel
#+begin_src clojure
(def echo-buffer (chan 2))
(>!! echo-buffer "ketchup")
(>!! echo-buffer "ketchup")
(>!! echo-buffer "ketchup")
#+end_src
*** FIFO buffer (queue)
#+begin_src clojure
(def echo-buffer (chan (a/sliding-buffer 2)))
(>!! echo-buffer "ketchup")
(>!! echo-buffer "mayo")
(>!! echo-buffer "mustard")
#+end_src
*** LIFO buffer (stack)
#+begin_src clojure
(def echo-buffer (chan (a/dropping-buffer 2)))
(>!! echo-buffer "ketchup")
(>!! echo-buffer "mayo")
(>!! echo-buffer "mustard")
#+end_src
** Blocking and Parking
| fun/scope | Inside go block | Outside go block |
| put       | >! or >!!       | >!!              |
| take      | <! or <!!       | <!!              |

This section show the difference between Blocking and Parking waiting, think about it respectively like ~pthread-wait~ e ~pthread-cond-wait~.
** Thread
Useful when you want Blocking, behave almost like future.
#+begin_src clojure
(thread (println (<!! hi-chan)))
#+end_src

The difference between future and thread is that the first return an object while thread return a channel.

#+begin_src clojure
(let [t (thread "chilli")]
  (<!! t))
#+end_src
* The Hot Dog Machine Process You've Been Longing For
#+begin_src clojure
(defn hot-dog-machine
  []
  (let [in (chan)
        out (chan)]
    (go (<! in)
        (>! out "hot dog"))
    [in out]))

;; make an hot dog
(let [[in out] (hot-dog-machine)]
  (>!! in "pocket lint")
  (<!! out))
#+end_src

#+RESULTS:
| #'playsync.core/hot-dog-machine |
| "hot dog"                       |

** V2
#+begin_src clojure
(defn hot-dog-machine-v2
  [hot-dog-count]
  (let [in (chan)
        out (chan)]
    (go (loop [hc hot-dog-count]
          (if (> hc 0)
            (let [input (<! in)]
              (if (= 3 input)
                (do (>! out "hot dog")
                    (recur (dec hc)))
                (do (>! out "wilted lettuce")
                    (recur hc))))
            (do (close! in)
                (close! out)))))
    [in out]))

(let [[in out] (hot-dog-machine-v2 2)]
  (>!! in "pocket lint")
  (println (<!! out))

  (>!! in 3)
  (println (<!! out))


  (>!! in 3)
  (println (<!! out))

  (>!! in 3)
  (println (<!! out)))
#+end_src

#+RESULTS:
: #'playsync.core/hot-dog-machine-v2
** Pipeline
#+begin_src clojure
(let [c1 (chan)
      c2 (chan)
      c3 (chan)]
  (go (>! c2 (clojure.string/upper-case (<! c1))))
  (go (>! c3 (clojure.string/reverse (<! c2))))
  (go (println (<! c3)))
  (>!! c1 "redrum"))
#+end_src

#+RESULTS:
: true
** Alts!!
Let you use the result of the first successful channel operation among a collection of operations.
#+begin_src clojure
(defn upload
  [headshot c]
  (go (Thread/sleep (rand 100))
      (>! c headshot)))

(let [c1 (chan)
      c2 (chan)
      c3 (chan)]
  (upload "serious.jpg" c1)
  (upload "fun.jpg" c2)
  (upload "sassy.jpg" c3)
  (let [[headshot channel] (alts!! [c1 c2 c3])]
    (println "Sending headshot notfication for" headshot)))
#+end_src

#+RESULTS:
: #'playsync.core/upload
*** timelimits with alts!!
#+begin_src clojure :results output
(let [c1 (chan)]
  (upload "serious.jpg" c1)
  (let [[headshot channel] (alts!! [c1 (timeout 20)])]
    (if headshot
      (println "Sending headshot notification for" headshot)
      (println "Timed out!"))))
#+end_src

#+RESULTS:
: Timed out!
*** use alts to specify puts operation
#+begin_src clojure :results output
(let [c1 (chan)
      c2 (chan)]
  (go (<! c2))
  (let [[value channel] (alts!! [c1 [c2 "put!"]])]
    (println value)
    (= channel c2)))
#+end_src

#+RESULTS:
: true
** Queues
#+begin_src clojure
(defn append-to-file
  "Write a string to the end of a file."
  [filename s]
  (spit filename s :append true))

(defn format-quote
  "Delineate the begginning and end of a quote because it's convenient."
  [quote]
  (str "=== BEGIN QUOTE ===\n" quote "=== END QUOTE ===\n\n"))

(defn random-quote
  "+Retrieve a random quote and format it+ --> return a not so random quote"
  []
  (Thread/sleep (rand 100))
  (format-quote "Not so random quote."))

(defn snag-quotes
  [filename num-quotes]
  (let [c (chan)]
    (go (while true (append-to-file filename (<! c))))
    (dotimes [n num-quotes] (go (>! c (random-quote))))))
#+end_src

#+RESULTS:
| #'playsync.core/append-to-file |
| #'playsync.core/format-quote   |
| #'playsync.core/random-quote   |
| #'playsync.core/snag-quotes    |
** Escape callback with process pipelines
#+begin_src clojure
(defn upper-caser
  [in]
  (let [out (chan)]
    (go (while true (>! out (clojure.string/upper-case (<! in)))))
    out))

(defn reverser
  [in]
  (let [out (chan)]
    (go (while true (>! out (clojure.string/reverse (<! in)))))
    out))

(defn printer
  [in]
  (go (while true (println (<! in)))))

(def in-chan (chan))
(def upper-caser-out (upper-caser in-chan))
(def reverser-out (reverser upper-caser-out))

(printer reverser-out)

(>!! in-chan "redrum")

(>!! in-chan "repaid")
#+end_src

#+RESULTS:
| #'playsync.core/upper-caser                                                                                                          |
| #'playsync.core/reverser                                                                                                             |
| #'playsync.core/printer                                                                                                              |
| #'playsync.core/in-chan                                                                                                              |
| #'playsync.core/upper-caser-out                                                                                                      |
| #'playsync.core/reverser-out                                                                                                         |
| #object[clojure.core.async.impl.channels.ManyToManyChannel 0x234ed014 "clojure.core.async.impl.channels.ManyToManyChannel@234ed014"] |
| true                                                                                                                                 |
| true                                                                                                                                 |
