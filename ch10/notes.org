#+title: Clojure metaphysics: atoms, refs, vars, and cuddel zombies.

* Object Oriented Metaphyisic
#+begin_src java :results output
public class CuddleZombie{
		private int cudgeLevel;
		private int percentDeteriorated;

		public CuddleZombie(int cudgeLevel, int percentDeteriorated){
				this.cudgeLevel = cudgeLevel;
				this.percentDeteriorated = percentDeteriorated;
		}

		public int getCudgeLevel(){
				return cudgeLevel;
		}

		public int getPercentDeteriorated(){
				return percentDeteriorated;
		}

		public void setCudgeLevel(int cudgeLevel){
				this.cudgeLevel = cudgeLevel;
		}

		public void setPercentDeteriorated(int percentDeteriorated){
				this.percentDeteriorated = percentDeteriorated;
		}

		public static void main(String[] args){
				var fred = new CuddleZombie(2, 3);
				System.out.println(fred.getCudgeLevel());
				System.out.println(fred.getPercentDeteriorated());

				fred.setCudgeLevel(1);
				fred.setPercentDeteriorated(1);
				System.out.println(fred.getCudgeLevel());
				System.out.println(fred.getPercentDeteriorated());
		}
}
#+end_src

#+RESULTS:
: 2
: 3
: 1
: 1

Suppose you want to analyze a cuddle zombie when the ~cuddle level~ is 50 or more, and suppose you want to analyze it in another thread to increase performance.

#+begin_src java
if fred.getCudgeLevel() >= 50 {
		new Thread(() -> {
						databaseLogger.log(fred);
		});
}
#+end_src

The problem is that another thread can change fred cuddle level while it is logging.
To solve this problem we need a ~mutex~ while working on fred.
* Clojure Metaphysic
In clojure metaphysics, we would say that we never encounter the same cuddle zombies twice.
The cuddle zombie is not a discrete thing that exists in the world independent of its mutations: it's actually a succession of values.
* Atoms
#+begin_src clojure
(def fred (atom {:cuddle-level 0
                 :percent-deteriorated 0}))
#+end_src

#+RESULTS:
: #'user/fred

Here the snippet on how to log fred cuddle level.
#+begin_src clojure
(let [zombie-state @fred]
  (if (>= (:percent-deterioarated zombie-state) 50)
    (future (println (:percent-deteriorated zombie-state)))))
#+end_src

We can change the atom reference with ~swap!~

#+begin_src clojure
(swap! fred
       (fn [current-state]
         (merge-with + current-state {:cuddle-level 1})))
#+end_src

We can't update fred with a function
#+begin_src clojure
(defn increase-cuddle-level
  [zombie-state increase-by]
  (merge-with + zombie-state {:cuddle-level increase-by}))
#+end_src

But we can use the function inside a ~swap!~ call.
#+begin_src clojure
(swap! increase-cuddle-level @fred 10)
#+end_src
* Watches and Validators
Watches take the reference, the old state and the new state and a function, the function will be runned when a certain condition is met on the state, like a watcher.

Here an example:
#+begin_src clojure
;; this is the function
(defn shuffle-speed
  [zombie]
  (* (:cuddle-level zombie)
     (- 100 (:percent-deteriorated zombie))))

(defn shuffle-alert
  [key watched old-state new-state]
  (let [sph (shuffle-speed new-state)]
    (if (> sph 5000)
      (do
        (println "Run, you fool!")
        (println "The zombie's SPH is now " sph)
        (println "This message brought to courtesy of " key))
      (do
        (println "All's well with " key)
        (println "Cuddle hunger: " (:cuddle-level new-state))
        (println "Percent deteriorated: " (:percent-deteriorated new-state))
        (println "SPH: " sph)))))

(reset! fred {:cuddle-level 22 :percent-deteriorated 2})

(add-watch fred :fred-shuffle-alert shuffle-alert)
#+end_src

#+RESULTS:
| #'user/shuffle-speed |
| #'user/shuffle-alert |

In this case we did't need to use old-state and watched, but sometimes they are useful, imagine to model a robot that accelerate and you want to stop the acceleration when it increase to fast, in this case you want to /watch/ (new-state - old-state).
* Watches
Validators let you specify the format of a legal state.
In our case a legal state for the cuddle zombie is when the deterioration is in between [0-100]
#+begin_src clojure
(def bobby
  (atom
   {:cuddle-level 0 :percent-deteriorated 0}
   :validator (fn [state] (<= 0 (:percent-deteriorated state) 100))))

;; still ok
(swap! bobby update-in [:percent-deteriorated] + 100)

;; throw an IllegalStateException
(swap! bobby update-in [:percent-deteriorated] + 1)
#+end_src

#+RESULTS:
| #'user/bobby                                 |
| {:cuddle-level 0, :percent-deteriorated 100} |
| class java.lang.IllegalStateException        |
* Refs
Atoms are useful to manage state of indipendent idenitities.
Atoms aren't good when we need to update multiplice dipendent identities, for this use case clojure provide ~REFS~.

Refs allow you to update the state of mulitple identities using transaction semantics.
The transaction semantics have 3 feature:
+ they are atomic
+ they are consistent
+ they are isolated
Basically they are the ACI of ACID (Atomicity Consistency Isolation +Durability+, the memory is not durable.)
** Modeling sock transfer
#+begin_src clojure
(def sock-varieties
  #{"darned" "argyle" "wool" "horsehair" "mulleted"
    "passive-aggressive" "striped" "polka-dotted"
    "athletic" "business" "power" "invisible" "gollumed"})

(defn sock-count
  [sock-variety count]
  {:variety sock-variety :count count})

(defn generate-sock-gnome
  "Create an initial sock gnome state with no socks"
  [name]
  {:name name
   :socks #{}})

(def sock-gnome (ref (generate-sock-gnome "Barumpharumph")))
(def dryer (ref {:name "LG 1337"
                 :socks (set (map #(sock-count % 2) sock-varieties))}))

(defn steal-sock
  [gnome dryer]
  (dosync
   (when-let [pair (some #(if (= (:count %) 2) %) (:socks @dryer))]
     (let [updated-count (sock-count (:variety pair) 1)]
       (alter gnome update-in [:socks] conj updated-count)
       (alter dryer update-in [:socks] disj pair)
       (alter dryer update-in [:socks] conj updated-count)))))

(steal-sock sock-gnome dryer)

(defn similar-socks
  [target-sock sock-set]
  (filter #(= (:variety %) (:variety target-sock)) sock-set))

(similar-socks (first (:socks @sock-gnome)) (:socks @dryer))
#+end_src

#+RESULTS:
| #'user/sock-varieties                                                                                                                                                                                                                                                                                                                                                                                                                                            |
| #'user/sock-count                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| #'user/generate-sock-gnome                                                                                                                                                                                                                                                                                                                                                                                                                                       |
| #'user/sock-gnome                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| #'user/dryer                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
| #'user/steal-sock                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| {:name "LG 1337", :socks #{{:variety "striped", :count 2} {:variety "wool", :count 2} {:variety "passive-aggressive", :count 2} {:variety "argyle", :count 2} {:variety "business", :count 2} {:variety "darned", :count 2} {:variety "polka-dotted", :count 2} {:variety "horsehair", :count 2} {:variety "power", :count 2} {:variety "athletic", :count 2} {:variety "gollumed", :count 1} {:variety "mulleted", :count 2} {:variety "invisible", :count 2}}} |
| #'user/similar-socks                                                                                                                                                                                                                                                                                                                                                                                                                                             |
| ({:variety "gollumed", :count 1})                                                                                                                                                                                                                                                                                                                                                                                                                                |
** another example on refs
#+begin_src clojure
(def counter (ref 0))

(future
  (dosync
   (alter counter inc)
   (println counter)
   (Thread/sleep 500)
   (alter counter inc)
   (println @counter)))
(Thread/sleep 250)
(println @counter)
#+end_src

#+RESULTS:
| #'user/counter                                |
| #future[{:status :pending, :val } 0x27abb4fd] |
* Commute
~commute~ allow to update a ref during a transaction.
It's the same as ~alter~ but change the behaviour at commit time.
** ~alter~ behaviour
1. Reach outside the transaction and read the ref's current state
2. Compare current state to the state the ref started with within the transaction
3. if the two differ, make the transaction retry
4. Otherwise, commit the altered ref state.
** ~commute~ behaviour
1. Reach outside the transaction and read the ref's current state
2. Run ~commute~ function again using the current state
3. Commit the result

~commute~ is faster, but can be used *ONLY* when it is not possible for your refs to end up in an invalid state.
** Safe use
#+begin_src clojure
(defn sleep-print-update
  [sleep-time thread-name update-fn]
  (fn [state]
    (Thread/sleep sleep-time)
    (println (str thread-name ": " state))
    (update-fn state)))

(def counter (ref 0))

(future (dosync (commute counter (sleep-print-update 100 "Thread A" inc))))
(future (dosync (commute counter (sleep-print-update 150 "Thread B" inc))))
#+end_src

#+RESULTS:
| #'user/sleep-print-update                     |
| #'user/counter                                |
| #future[{:status :pending, :val } 0x300f9402] |
| #future[{:status :pending, :val } 0x3c4d3a52] |
** Unsafe use
#+begin_src clojure
(def receiver-a (ref #{}))
(def receiver-b (ref #{}))
(def giver (ref #{1}))

(do (future (dosync (let [gift (first @giver)]
                      (Thread/sleep 10)
                      (commute receiver-a conj gift)
                      (commute giver disj gift))))
    (future (dosync (let [gift (first @giver)]
                      (Thread/sleep 10)
                      (commute receiver-b conj gift)
                      (commute giver disj gift)))))
#+end_src

#+RESULTS:
| #'user/receiver-a                            |
| #'user/receiver-b                            |
| #'user/giver                                 |
| #future[{:status :pending, :val } 0xce0be68] |
* Vars
** Dynamic Binding
#+begin_src clojure
(def ^:dynamic *notification-address* "dobby@elf.org")
,*notification-address*

(binding [*notification-address* "test@elf.org"]
  ,*notification-address*)

(binding [*notification-address* "tester-1@elf.org"]
  (println *notification-address*)
  (binding [*notification-address* "tester-1@elf.org"]
    (println *notification-address*))
  (println *notification-address*))
#+end_src

#+RESULTS:
| #'user/*notification-address* |
| "dobby@elf.org"               |
| "test@elf.org"                |
*** Dynamic Var Use case
Pretend that the function send an email.
#+begin_src clojure
(defn notify
  [message]
  (str "TO: " *notification-address* "\n"
       "MESSAGE: " message))

(notify "I fell.")
#+end_src

#+RESULTS:
| #'user/notify                         |
| "TO: dobby@elf.org\nMESSAGE: I fell." |

A more realistic use case
#+begin_src clojure
(binding [*out* (clojure.java.io/writer "print-output")]
  (println "A man who carries a cat by the tail learns something he can learns in no other way"))

(slurp "print-output")
#+end_src

#+RESULTS:
: Please reevaluate when nREPL is connected

Another example:
#+begin_src clojure
(def ^:dynamic *troll-thought* nil)

(defn troll-riddle
  [your-answer]
  (let [number "man eat"]
    (when (thread-bound? #'*troll-thought*)
      (set! *troll-thought* number))
    (if (= number your-answer)
      "Troll: You can cross the bridge!"
      "Troll: Time to eat you, succulent human!")))

(binding [*troll-thought* nil]
  (println (troll-riddle 2))
  (println "Succulent human: Ooooh! The answer was " *troll-thought*))
#+end_src

#+RESULTS:
| #'user/*troll-thought* |
| #'user/troll-riddle    |
** Per-Thread binding
#+begin_src clojure :results output
(.write *out* "prints to repl")

(.start (Thread. #(.write *out* "print to standard output")))

(let [out *out*]
  (.start
   (Thread. #(binding [*out* out]
               (.write *out* "prints to repl from thread")))))

(.start (Thread. (bound-fn [] (.write *out* "prints to repl from thread"))))
#+end_src

#+RESULTS:
| prints to repl             |
| print to standard output   |
| prints to repl from thread |
| prints to repl from thread |
** Altering the root var
This is not what we want to do in functional programming.
#+begin_src clojure
(def power-source "hair")
power-source

;; this mod is not visible in child thread
(alter-var-root #'power-source (fn [_] "7-eleven parking lot"))
power-source

(with-redefs [*out* *out*]
  (doto (Thread. #(println "with redefs allows me to show up in the REPL"))
    .start
    .join))
#+end_src

#+RESULTS:
| #'user/power-source    |
| "hair"                 |
| "7-eleven parking lot" |
| "7-eleven parking lot" |

This functions can be really useful during developing, but should never reach deployment.
Imagine that a function work on network request, using ~with-redefs~ you return dummy data to test your function.
* Stateless concurrency and parallelism with pmap
#+begin_src clojure
(defn always-1
  []
  1)

(take 5 (repeatedly always-1))

(take 5 (repeatedly (partial rand-int 10)))
#+end_src

#+RESULTS:
| #'user/always-1 |
| (1 1 1 1 1)     |
| (8 6 2 8 1)     |
** Example of pmap performance
#+begin_src clojure :results output
(def alphabet-length 26)

(def letters (mapv (comp str char (partial + 65)) (range alphabet-length)))

(defn random-string
  "Returns a random string of specified length."
  [length]
  (apply str (take length (repeatedly #(rand-nth letters)))))

(defn random-string-list
  [list-length string-length]
  (doall (take list-length (repeatedly (partial random-string string-length)))))

(def orc-names (random-string-list 3000 7000))

(time (dorun (map clojure.string/lower-case orc-names)))
(time (dorun (pmap clojure.string/lower-case orc-names)))
#+end_src

#+RESULTS:
| #'user/alphabet-length    |
| #'user/letters            |
| #'user/random-string      |
| #'user/random-string-list |
| #'user/orc-names          |
** buffered version
The strategy, increase the grain size.
#+begin_src clojure
(def numbers [1 2 3 4 5 6 7 8 9 10])

(partition-all 3 numbers)

(pmap (fn [number-group] (doall (map inc number-group)))
      (partition-all 3 numbers))

(apply concat
       (pmap (fn [number-group] (doall (map inc number-group)))
             (partition-all 3 numbers)))
#+end_src

#+begin_src clojure :results output
(time
 (dorun
  (apply concat
         (pmap (fn [name] (doall (map clojure.string/lower-case name)))
               (partition-all 1000 orc-names)))))

(defn ppmap
  "Partitioned pmap, for grouping map ops together to make parallel overhead worthwhile"
  [grain-size f & colls]
  (apply concat
         (apply pmap
                (fn [& pgroups] (doall (apply map f pgroups)))
                (map (partial partition-all grain-size) colls))))

(time (dorun (ppmap 1000 clojure.string/lower-case orc-names)))
#+end_src

| "Elapsed time: 33.747844 msecs" |
* Exercise 1
Create an atom with the initial value 0, use ~swap!~ to increment it a couple of times, and then dereference it.
#+begin_src clojure
(def var (atom 0))

(do
  (swap! var inc)
  (swap! var inc)
  (swap! var inc)
  (swap! var inc)
  (swap! var inc))

@var
(reset! var 0)
#+end_src

#+RESULTS:
| #'user/var |
|          5 |
|          5 |
|          0 |
* Exercise 2
Create a function that...
I can test this solution because the [[https://www.braveclojure.com/random-quote][link]] is dead.
#+begin_src clojure
(defn get-quote
  []
  (slurp "http://www.braveclojure.com/random-quote"))

(defn count-words
  [quote]
  (let [trimmed (clojure.string/trim quote)]
    (count (clojure.string/split trimmed #"\s+"))))

(defn quote-word-count
  [n]
  (let [result (atom 0)
        requests (repeatedly n #(future (swap! result + (count-words (get-quote)))))]
    (dorun (map deref (doall requests)))
    @result))

(with-redefs [get-quote (fn [] "Not so random quote.")]
  (quote-word-count 1))

(with-redefs [get-quote (fn [] "Not so random quote.")]
  (quote-word-count 2))

(with-redefs [get-quote (fn [] "Not so random quote.")]
  (quote-word-count 3))

(with-redefs [get-quote (fn [] "Not so random quote.")]
  (quote-word-count 4))

(with-redefs [get-quote (fn [] "Not so random quote.")]
  (quote-word-count 5))
#+end_src

#+RESULTS:
|        #'user/get-quote |
|      #'user/count-words |
| #'user/quote-word-count |
|                       4 |
|                       8 |
|                      12 |
|                      16 |
|                      20 |

** Key function
+ ~doall~ this function execute all the function (with side effects) and execute all, in this case I will create a future request and launch it immediately.
+ ~dorun~ consume all the future by derefencing them, in this case is more useful beacuse it behave like a barrier
+ ~deref~, I could have use ~~@~ but with the syntax quote ~`~ it become less readable in this case
** Note
I struggled a bit with this exercise, basically I had proble with the ~barrier~, searching the web I finded the help I need, unfortunately it was just the [[https://github.com/peferron/clojure-brave-true/blob/master/chapter-10.clj][solution]] to this exercise and I didn't resist the temptation.
* Exercise 3
 Create a rapresentation of two characters in a game. The first character has 15 hit points out of a total of 40.
 The second character has a healing potion in his memory.
 Use refs and transaction to model the comsumption of the healing potion and the first characters healing.
#+begin_src clojure
(def character-1 (ref {:hp 15 :bag []}))
(def character-2 (ref {:hp 40 :bag [:healing-potion]}))


(dosync
 (commute character-1 assoc :hp 40)
 (let [bag (:bag character-2)
       bag (apply vector (remove #(= % :healing-potion) bag))]
   (commute character-2 assoc :bag bag)))

(def character-1 (ref {:hp 15 :bag []}))
(def character-2 (ref {:hp 40 :bag [:healing-potion]}))
(dosync
 (commute character-1 assoc :hp 40)
 (->> (:bag character-2)
     (remove #(= % :healing-potion))
     (apply vector)
     (commute character-2 assoc :bag)))
#+end_src

#+RESULTS:
| #'user/character-1 |
| #'user/character-2 |
| {:hp 40, :bag []}  |
| #'user/character-1 |
| #'user/character-2 |
| {:hp 40, :bag []}  |

In this case use ~alter~ is more appropriate, so a better solution is:
#+begin_src clojure
(def character-1 (ref {:hp 15 :bag []}))
(def character-2 (ref {:hp 40 :bag [:healing-potion]}))
(dosync
 (alter character-1 assoc :hp 40)
 (->> (:bag character-2)
     (remove #(= % :healing-potion))
     (apply vector)
     (alter character-2 assoc :bag)))
#+end_src

#+RESULTS:
| #'user/character-1 |
| #'user/character-2 |
| {:hp 40, :bag []}  |
